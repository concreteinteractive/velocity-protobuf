// Code generated by protoc-gen-go.
// source: velocity.proto
// DO NOT EDIT!

/*
Package VelocityProto is a generated protocol buffer package.

It is generated from these files:
	velocity.proto

It has these top-level messages:
	Sensor
	Sample
	Capture
	DetectMotionRequest
	HandshakeRequest
	HandshakeResponse
	Request
	ModelPrediction
	Prediction
	Error
	Response
*/
package VelocityProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PlatformType int32

const (
	PlatformType_IOS     PlatformType = 0
	PlatformType_Android PlatformType = 1
)

var PlatformType_name = map[int32]string{
	0: "IOS",
	1: "Android",
}
var PlatformType_value = map[string]int32{
	"IOS":     0,
	"Android": 1,
}

func (x PlatformType) Enum() *PlatformType {
	p := new(PlatformType)
	*p = x
	return p
}
func (x PlatformType) String() string {
	return proto.EnumName(PlatformType_name, int32(x))
}
func (x *PlatformType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PlatformType_value, data, "PlatformType")
	if err != nil {
		return err
	}
	*x = PlatformType(value)
	return nil
}
func (PlatformType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Sensor_Type int32

const (
	Sensor_Accel Sensor_Type = 0
	Sensor_Gyro  Sensor_Type = 1
	Sensor_Mag   Sensor_Type = 2
	Sensor_GPS   Sensor_Type = 3
)

var Sensor_Type_name = map[int32]string{
	0: "Accel",
	1: "Gyro",
	2: "Mag",
	3: "GPS",
}
var Sensor_Type_value = map[string]int32{
	"Accel": 0,
	"Gyro":  1,
	"Mag":   2,
	"GPS":   3,
}

func (x Sensor_Type) Enum() *Sensor_Type {
	p := new(Sensor_Type)
	*p = x
	return p
}
func (x Sensor_Type) String() string {
	return proto.EnumName(Sensor_Type_name, int32(x))
}
func (x *Sensor_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Sensor_Type_value, data, "Sensor_Type")
	if err != nil {
		return err
	}
	*x = Sensor_Type(value)
	return nil
}
func (Sensor_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Sensor struct {
	Type             *Sensor_Type `protobuf:"varint,1,req,name=type,enum=VelocityProto.Sensor_Type" json:"type,omitempty"`
	Samples          []*Sample    `protobuf:"bytes,2,rep,name=samples" json:"samples,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Sensor) Reset()                    { *m = Sensor{} }
func (m *Sensor) String() string            { return proto.CompactTextString(m) }
func (*Sensor) ProtoMessage()               {}
func (*Sensor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Sensor) GetType() Sensor_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Sensor_Accel
}

func (m *Sensor) GetSamples() []*Sample {
	if m != nil {
		return m.Samples
	}
	return nil
}

type Sample struct {
	Timestamp        *float64  `protobuf:"fixed64,1,req,name=timestamp" json:"timestamp,omitempty"`
	Values           []float32 `protobuf:"fixed32,2,rep,name=values" json:"values,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Sample) Reset()                    { *m = Sample{} }
func (m *Sample) String() string            { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()               {}
func (*Sample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Sample) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Sample) GetValues() []float32 {
	if m != nil {
		return m.Values
	}
	return nil
}

type Capture struct {
	ImpressionId     *string       `protobuf:"bytes,1,opt,name=impressionId" json:"impressionId,omitempty"`
	Ifa              *string       `protobuf:"bytes,2,req,name=ifa" json:"ifa,omitempty"`
	SequenceIndex    *uint32       `protobuf:"varint,3,req,name=sequenceIndex" json:"sequenceIndex,omitempty"`
	AppId            *string       `protobuf:"bytes,4,opt,name=appId" json:"appId,omitempty"`
	Metadata         *string       `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
	Platform         *PlatformType `protobuf:"varint,6,req,name=platform,enum=VelocityProto.PlatformType" json:"platform,omitempty"`
	Sensors          []*Sensor     `protobuf:"bytes,7,rep,name=sensors" json:"sensors,omitempty"`
	Timestamp        *float64      `protobuf:"fixed64,8,req,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Capture) Reset()                    { *m = Capture{} }
func (m *Capture) String() string            { return proto.CompactTextString(m) }
func (*Capture) ProtoMessage()               {}
func (*Capture) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Capture) GetImpressionId() string {
	if m != nil && m.ImpressionId != nil {
		return *m.ImpressionId
	}
	return ""
}

func (m *Capture) GetIfa() string {
	if m != nil && m.Ifa != nil {
		return *m.Ifa
	}
	return ""
}

func (m *Capture) GetSequenceIndex() uint32 {
	if m != nil && m.SequenceIndex != nil {
		return *m.SequenceIndex
	}
	return 0
}

func (m *Capture) GetAppId() string {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return ""
}

func (m *Capture) GetMetadata() string {
	if m != nil && m.Metadata != nil {
		return *m.Metadata
	}
	return ""
}

func (m *Capture) GetPlatform() PlatformType {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return PlatformType_IOS
}

func (m *Capture) GetSensors() []*Sensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

func (m *Capture) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type DetectMotionRequest struct {
	Id               *string       `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	UserId           *string       `protobuf:"bytes,2,req,name=userId" json:"userId,omitempty"`
	SequenceIndex    *uint32       `protobuf:"varint,3,req,name=sequenceIndex" json:"sequenceIndex,omitempty"`
	Platform         *PlatformType `protobuf:"varint,4,req,name=platform,enum=VelocityProto.PlatformType" json:"platform,omitempty"`
	Timestamp        *float64      `protobuf:"fixed64,5,req,name=timestamp" json:"timestamp,omitempty"`
	ModelName        []string      `protobuf:"bytes,6,rep,name=modelName" json:"modelName,omitempty"`
	Sensors          []*Sensor     `protobuf:"bytes,7,rep,name=sensors" json:"sensors,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *DetectMotionRequest) Reset()                    { *m = DetectMotionRequest{} }
func (m *DetectMotionRequest) String() string            { return proto.CompactTextString(m) }
func (*DetectMotionRequest) ProtoMessage()               {}
func (*DetectMotionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DetectMotionRequest) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *DetectMotionRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *DetectMotionRequest) GetSequenceIndex() uint32 {
	if m != nil && m.SequenceIndex != nil {
		return *m.SequenceIndex
	}
	return 0
}

func (m *DetectMotionRequest) GetPlatform() PlatformType {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return PlatformType_IOS
}

func (m *DetectMotionRequest) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *DetectMotionRequest) GetModelName() []string {
	if m != nil {
		return m.ModelName
	}
	return nil
}

func (m *DetectMotionRequest) GetSensors() []*Sensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type HandshakeRequest struct {
	AuthToken        *string       `protobuf:"bytes,1,opt,name=authToken" json:"authToken,omitempty"`
	Idfa             *string       `protobuf:"bytes,2,opt,name=idfa" json:"idfa,omitempty"`
	UserId           *string       `protobuf:"bytes,3,opt,name=userId" json:"userId,omitempty"`
	AppId            *string       `protobuf:"bytes,4,opt,name=appId" json:"appId,omitempty"`
	Platform         *PlatformType `protobuf:"varint,5,opt,name=platform,enum=VelocityProto.PlatformType" json:"platform,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *HandshakeRequest) Reset()                    { *m = HandshakeRequest{} }
func (m *HandshakeRequest) String() string            { return proto.CompactTextString(m) }
func (*HandshakeRequest) ProtoMessage()               {}
func (*HandshakeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HandshakeRequest) GetAuthToken() string {
	if m != nil && m.AuthToken != nil {
		return *m.AuthToken
	}
	return ""
}

func (m *HandshakeRequest) GetIdfa() string {
	if m != nil && m.Idfa != nil {
		return *m.Idfa
	}
	return ""
}

func (m *HandshakeRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *HandshakeRequest) GetAppId() string {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return ""
}

func (m *HandshakeRequest) GetPlatform() PlatformType {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return PlatformType_IOS
}

type HandshakeResponse struct {
	SampleSize       *float64 `protobuf:"fixed64,1,opt,name=sampleSize" json:"sampleSize,omitempty"`
	CaptureInterval  *float64 `protobuf:"fixed64,2,opt,name=captureInterval" json:"captureInterval,omitempty"`
	CanDetectMotion  *bool    `protobuf:"varint,3,opt,name=canDetectMotion" json:"canDetectMotion,omitempty"`
	CanLabelMotion   *bool    `protobuf:"varint,4,opt,name=canLabelMotion" json:"canLabelMotion,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *HandshakeResponse) Reset()                    { *m = HandshakeResponse{} }
func (m *HandshakeResponse) String() string            { return proto.CompactTextString(m) }
func (*HandshakeResponse) ProtoMessage()               {}
func (*HandshakeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HandshakeResponse) GetSampleSize() float64 {
	if m != nil && m.SampleSize != nil {
		return *m.SampleSize
	}
	return 0
}

func (m *HandshakeResponse) GetCaptureInterval() float64 {
	if m != nil && m.CaptureInterval != nil {
		return *m.CaptureInterval
	}
	return 0
}

func (m *HandshakeResponse) GetCanDetectMotion() bool {
	if m != nil && m.CanDetectMotion != nil {
		return *m.CanDetectMotion
	}
	return false
}

func (m *HandshakeResponse) GetCanLabelMotion() bool {
	if m != nil && m.CanLabelMotion != nil {
		return *m.CanLabelMotion
	}
	return false
}

type Request struct {
	Sensors          []*Sensor `protobuf:"bytes,1,rep,name=sensors" json:"sensors,omitempty"`
	ModelNames       []string  `protobuf:"bytes,2,rep,name=modelNames" json:"modelNames,omitempty"`
	SessionId        *string   `protobuf:"bytes,3,opt,name=sessionId" json:"sessionId,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Request) GetSensors() []*Sensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

func (m *Request) GetModelNames() []string {
	if m != nil {
		return m.ModelNames
	}
	return nil
}

func (m *Request) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

type ModelPrediction struct {
	ModelName        *string       `protobuf:"bytes,1,req,name=modelName" json:"modelName,omitempty"`
	Predictions      []*Prediction `protobuf:"bytes,2,rep,name=predictions" json:"predictions,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ModelPrediction) Reset()                    { *m = ModelPrediction{} }
func (m *ModelPrediction) String() string            { return proto.CompactTextString(m) }
func (*ModelPrediction) ProtoMessage()               {}
func (*ModelPrediction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ModelPrediction) GetModelName() string {
	if m != nil && m.ModelName != nil {
		return *m.ModelName
	}
	return ""
}

func (m *ModelPrediction) GetPredictions() []*Prediction {
	if m != nil {
		return m.Predictions
	}
	return nil
}

type Prediction struct {
	Name             *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Confidence       *float32 `protobuf:"fixed32,2,opt,name=confidence" json:"confidence,omitempty"`
	Timestamp        *float64 `protobuf:"fixed64,3,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Prediction) Reset()                    { *m = Prediction{} }
func (m *Prediction) String() string            { return proto.CompactTextString(m) }
func (*Prediction) ProtoMessage()               {}
func (*Prediction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Prediction) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Prediction) GetConfidence() float32 {
	if m != nil && m.Confidence != nil {
		return *m.Confidence
	}
	return 0
}

func (m *Prediction) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type Error struct {
	ErrorMessage     *string `protobuf:"bytes,1,req,name=errorMessage" json:"errorMessage,omitempty"`
	ErrorCode        *string `protobuf:"bytes,2,opt,name=errorCode" json:"errorCode,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Error) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *Error) GetErrorCode() string {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return ""
}

type Response struct {
	ModelPredictions []*ModelPrediction `protobuf:"bytes,1,rep,name=modelPredictions" json:"modelPredictions,omitempty"`
	Error            *Error             `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Response) GetModelPredictions() []*ModelPrediction {
	if m != nil {
		return m.ModelPredictions
	}
	return nil
}

func (m *Response) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*Sensor)(nil), "VelocityProto.Sensor")
	proto.RegisterType((*Sample)(nil), "VelocityProto.Sample")
	proto.RegisterType((*Capture)(nil), "VelocityProto.Capture")
	proto.RegisterType((*DetectMotionRequest)(nil), "VelocityProto.DetectMotionRequest")
	proto.RegisterType((*HandshakeRequest)(nil), "VelocityProto.HandshakeRequest")
	proto.RegisterType((*HandshakeResponse)(nil), "VelocityProto.HandshakeResponse")
	proto.RegisterType((*Request)(nil), "VelocityProto.Request")
	proto.RegisterType((*ModelPrediction)(nil), "VelocityProto.ModelPrediction")
	proto.RegisterType((*Prediction)(nil), "VelocityProto.Prediction")
	proto.RegisterType((*Error)(nil), "VelocityProto.Error")
	proto.RegisterType((*Response)(nil), "VelocityProto.Response")
	proto.RegisterEnum("VelocityProto.PlatformType", PlatformType_name, PlatformType_value)
	proto.RegisterEnum("VelocityProto.Sensor_Type", Sensor_Type_name, Sensor_Type_value)
}

func init() { proto.RegisterFile("velocity.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0xd4, 0x3e,
	0x10, 0x6d, 0xfe, 0xec, 0x9f, 0xcc, 0xb6, 0xdb, 0xfc, 0xfc, 0x2b, 0x28, 0x94, 0xaa, 0x5a, 0x45,
	0x15, 0x5a, 0x55, 0x62, 0x91, 0x7a, 0xe1, 0x80, 0x84, 0xd4, 0x16, 0x54, 0x16, 0x75, 0x61, 0xe5,
	0xad, 0x7a, 0x44, 0x32, 0xb1, 0xdb, 0x46, 0x4d, 0xe2, 0x10, 0x7b, 0xab, 0x2e, 0x47, 0x6e, 0x7c,
	0x03, 0x6e, 0x48, 0x5c, 0x39, 0xf0, 0x15, 0x91, 0x9d, 0x64, 0x37, 0x09, 0x3d, 0xb4, 0x37, 0xcf,
	0xf3, 0xb3, 0x3d, 0xf3, 0xe6, 0x8d, 0xa1, 0x7f, 0xc3, 0x22, 0x1e, 0x84, 0x72, 0x31, 0x4a, 0x33,
	0x2e, 0x39, 0xda, 0x38, 0x2f, 0xe2, 0xa9, 0x0a, 0xfd, 0x1f, 0x06, 0xb4, 0x67, 0x2c, 0x11, 0x3c,
	0x43, 0x23, 0xb0, 0xe5, 0x22, 0x65, 0x9e, 0x31, 0x30, 0x87, 0xfd, 0x83, 0xed, 0x51, 0x8d, 0x38,
	0xca, 0x49, 0xa3, 0xb3, 0x45, 0xca, 0xb0, 0xe6, 0xa1, 0x17, 0xd0, 0x11, 0x24, 0x4e, 0x23, 0x26,
	0x3c, 0x73, 0x60, 0x0d, 0x7b, 0x07, 0x8f, 0x9a, 0x47, 0xf4, 0x2e, 0x2e, 0x59, 0xfe, 0x73, 0xb0,
	0xd5, 0x71, 0xe4, 0x40, 0xeb, 0x30, 0x08, 0x58, 0xe4, 0xae, 0xa1, 0x2e, 0xd8, 0x27, 0x8b, 0x8c,
	0xbb, 0x06, 0xea, 0x80, 0x35, 0x21, 0x97, 0xae, 0xa9, 0x16, 0x27, 0xd3, 0x99, 0x6b, 0xf9, 0xaf,
	0xa1, 0x9d, 0xdf, 0x80, 0x76, 0xc0, 0x91, 0x61, 0xcc, 0x84, 0x24, 0x71, 0xaa, 0xd3, 0x33, 0xf0,
	0x0a, 0x40, 0x8f, 0xa1, 0x7d, 0x43, 0xa2, 0x79, 0x91, 0x86, 0x89, 0x8b, 0xc8, 0xff, 0x69, 0x42,
	0xe7, 0x98, 0xa4, 0x72, 0x9e, 0x31, 0xe4, 0xc3, 0x7a, 0x18, 0xa7, 0x19, 0x13, 0x22, 0xe4, 0xc9,
	0x98, 0x7a, 0xc6, 0xc0, 0x18, 0x3a, 0xb8, 0x86, 0x21, 0x17, 0xac, 0xf0, 0x82, 0x78, 0xe6, 0xc0,
	0x1c, 0x3a, 0x58, 0x2d, 0xd1, 0x1e, 0x6c, 0x08, 0xf6, 0x65, 0xce, 0x92, 0x80, 0x8d, 0x13, 0xca,
	0x6e, 0x3d, 0x6b, 0x60, 0x0e, 0x37, 0x70, 0x1d, 0x44, 0x5b, 0xd0, 0x22, 0x69, 0x3a, 0xa6, 0x9e,
	0xad, 0x2f, 0xcd, 0x03, 0xb4, 0x0d, 0xdd, 0x98, 0x49, 0x42, 0x89, 0x24, 0x5e, 0x4b, 0x6f, 0x2c,
	0x63, 0xf4, 0x12, 0xba, 0x69, 0x44, 0xe4, 0x05, 0xcf, 0x62, 0xaf, 0xad, 0xd5, 0x7e, 0xda, 0x90,
	0x6e, 0x5a, 0x6c, 0x6b, 0xb9, 0x97, 0x64, 0x2d, 0xb9, 0xee, 0x83, 0xf0, 0x3a, 0x77, 0x4b, 0xae,
	0x77, 0x71, 0xc9, 0xaa, 0x2b, 0xd7, 0x6d, 0x28, 0xe7, 0x7f, 0x37, 0xe1, 0xff, 0x37, 0x4c, 0xb2,
	0x40, 0x4e, 0xb8, 0x0c, 0x79, 0x82, 0x55, 0x5d, 0x42, 0xa2, 0x3e, 0x98, 0x21, 0xd5, 0x42, 0x3b,
	0xd8, 0x0c, 0xa9, 0x52, 0x78, 0x2e, 0x58, 0x36, 0xa6, 0x85, 0x38, 0x45, 0x74, 0x4f, 0x7d, 0xaa,
	0xd5, 0xda, 0x0f, 0xa9, 0xb6, 0x96, 0x7c, 0xab, 0xd9, 0xf6, 0x1d, 0x70, 0x62, 0x4e, 0x59, 0xf4,
	0x81, 0xc4, 0xcc, 0x6b, 0x0f, 0xac, 0xa1, 0x83, 0x57, 0xc0, 0x83, 0x95, 0xf2, 0x7f, 0x1b, 0xe0,
	0xbe, 0x23, 0x09, 0x15, 0x57, 0xe4, 0x9a, 0x95, 0x42, 0xec, 0x80, 0x43, 0xe6, 0xf2, 0xea, 0x8c,
	0x5f, 0xb3, 0xa4, 0xf0, 0xcc, 0x0a, 0x40, 0x08, 0xec, 0x90, 0x6a, 0xc7, 0xa8, 0x0d, 0xbd, 0xae,
	0x48, 0x65, 0x69, 0xb4, 0x94, 0xea, 0x6e, 0x93, 0x54, 0xa5, 0x51, 0x26, 0xb9, 0xaf, 0x34, 0xfe,
	0x1f, 0x03, 0xfe, 0xab, 0x64, 0x2b, 0x52, 0x9e, 0x08, 0x86, 0x76, 0x01, 0xf2, 0x59, 0x9b, 0x85,
	0x5f, 0x99, 0xce, 0xd7, 0xc0, 0x15, 0x04, 0x0d, 0x61, 0x33, 0xc8, 0x07, 0x62, 0x9c, 0x48, 0x96,
	0xdd, 0x90, 0x48, 0xe7, 0x6e, 0xe0, 0x26, 0x9c, 0x33, 0x93, 0xaa, 0x37, 0x74, 0x3d, 0x5d, 0xdc,
	0x84, 0xd1, 0x33, 0xe8, 0x07, 0x24, 0x39, 0x25, 0x9f, 0x59, 0x54, 0x10, 0x6d, 0x4d, 0x6c, 0xa0,
	0xfe, 0x2d, 0x74, 0x4a, 0x55, 0x2b, 0xbd, 0x31, 0xee, 0xe5, 0xe2, 0x5d, 0x80, 0x65, 0x67, 0xf3,
	0x29, 0x77, 0x70, 0x05, 0x51, 0x6d, 0x12, 0xcb, 0xd1, 0xce, 0x75, 0x5f, 0x01, 0x7e, 0x04, 0x9b,
	0x13, 0xc5, 0x9d, 0x66, 0x8c, 0x86, 0x81, 0x4e, 0xba, 0xe6, 0x9d, 0xdc, 0xe7, 0x15, 0xef, 0xbc,
	0x82, 0x5e, 0xba, 0xe4, 0x96, 0x9f, 0xdb, 0x93, 0x66, 0x63, 0x96, 0x0c, 0x5c, 0x65, 0xfb, 0x9f,
	0x00, 0x2a, 0x0f, 0x21, 0xb0, 0x93, 0xd5, 0x1b, 0x7a, 0xad, 0xaa, 0x09, 0x78, 0x72, 0x11, 0x52,
	0x35, 0x22, 0xba, 0x01, 0x26, 0xae, 0x20, 0x75, 0xdb, 0x5b, 0xba, 0x3f, 0x95, 0x99, 0x1d, 0x43,
	0xeb, 0x6d, 0x96, 0xf1, 0x4c, 0x7d, 0x69, 0x4c, 0x2d, 0x26, 0x4c, 0x08, 0x72, 0x59, 0x3e, 0x51,
	0xc3, 0xd4, 0x55, 0x3a, 0x3e, 0xe6, 0x94, 0x15, 0x36, 0x5d, 0x01, 0xfe, 0x37, 0x03, 0xba, 0x4b,
	0xef, 0xbc, 0x07, 0x37, 0xae, 0xab, 0x54, 0x76, 0x67, 0xb7, 0x51, 0x79, 0x43, 0x4c, 0xfc, 0xcf,
	0x39, 0xb4, 0x0f, 0x2d, 0xfd, 0x8a, 0x7e, 0xb2, 0x77, 0xb0, 0xd5, 0xb8, 0x40, 0xe7, 0x8f, 0x73,
	0xca, 0xfe, 0x1e, 0xac, 0x57, 0x3d, 0xae, 0xbe, 0xff, 0xf1, 0xc7, 0x99, 0xbb, 0x86, 0x7a, 0xd0,
	0x39, 0x4c, 0x68, 0xc6, 0x43, 0xea, 0x1a, 0x47, 0xdd, 0x5f, 0x66, 0xeb, 0xfc, 0xf4, 0x6c, 0x7a,
	0xf4, 0x37, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x9c, 0x10, 0x98, 0xd0, 0x06, 0x00, 0x00,
}
