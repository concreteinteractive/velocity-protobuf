// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Velocity.pb.h"
// @@protoc_insertion_point(imports)

@implementation VLTPBVelocityRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [VLTPBVelocityRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface VLTPBCapture ()
@property (strong) NSString* impressionId;
@property (strong) NSString* ifa;
@property UInt32 sequenceIndex;
@property (strong) NSString* appId;
@property (strong) NSString* metadata;
@property VLTPBCapturePlatformType platform;
@property (strong) NSMutableArray * sensorsArray;
@property Float64 timestamp;
@end

@implementation VLTPBCapture

- (BOOL) hasImpressionId {
  return !!hasImpressionId_;
}
- (void) setHasImpressionId:(BOOL) _value_ {
  hasImpressionId_ = !!_value_;
}
@synthesize impressionId;
- (BOOL) hasIfa {
  return !!hasIfa_;
}
- (void) setHasIfa:(BOOL) _value_ {
  hasIfa_ = !!_value_;
}
@synthesize ifa;
- (BOOL) hasSequenceIndex {
  return !!hasSequenceIndex_;
}
- (void) setHasSequenceIndex:(BOOL) _value_ {
  hasSequenceIndex_ = !!_value_;
}
@synthesize sequenceIndex;
- (BOOL) hasAppId {
  return !!hasAppId_;
}
- (void) setHasAppId:(BOOL) _value_ {
  hasAppId_ = !!_value_;
}
@synthesize appId;
- (BOOL) hasMetadata {
  return !!hasMetadata_;
}
- (void) setHasMetadata:(BOOL) _value_ {
  hasMetadata_ = !!_value_;
}
@synthesize metadata;
- (BOOL) hasPlatform {
  return !!hasPlatform_;
}
- (void) setHasPlatform:(BOOL) _value_ {
  hasPlatform_ = !!_value_;
}
@synthesize platform;
@synthesize sensorsArray;
@dynamic sensors;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.impressionId = @"";
    self.ifa = @"";
    self.sequenceIndex = 0;
    self.appId = @"";
    self.metadata = @"";
    self.platform = VLTPBCapturePlatformTypeIos;
    self.timestamp = 0;
  }
  return self;
}
static VLTPBCapture* defaultVLTPBCaptureInstance = nil;
+ (void) initialize {
  if (self == [VLTPBCapture class]) {
    defaultVLTPBCaptureInstance = [[VLTPBCapture alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultVLTPBCaptureInstance;
}
- (instancetype) defaultInstance {
  return defaultVLTPBCaptureInstance;
}
- (NSArray *)sensors {
  return sensorsArray;
}
- (VLTPBSensor*)sensorsAtIndex:(NSUInteger)index {
  return [sensorsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasIfa) {
    return NO;
  }
  if (!self.hasSequenceIndex) {
    return NO;
  }
  if (!self.hasPlatform) {
    return NO;
  }
  if (!self.hasTimestamp) {
    return NO;
  }
  __block BOOL isInitsensors = YES;
   [self.sensors enumerateObjectsUsingBlock:^(VLTPBSensor *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsensors = NO;
      *stop = YES;
    }
  }];
  if (!isInitsensors) return isInitsensors;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasImpressionId) {
    [output writeString:1 value:self.impressionId];
  }
  if (self.hasIfa) {
    [output writeString:2 value:self.ifa];
  }
  if (self.hasSequenceIndex) {
    [output writeUInt32:3 value:self.sequenceIndex];
  }
  if (self.hasAppId) {
    [output writeString:4 value:self.appId];
  }
  if (self.hasMetadata) {
    [output writeString:5 value:self.metadata];
  }
  if (self.hasPlatform) {
    [output writeEnum:6 value:self.platform];
  }
  [self.sensorsArray enumerateObjectsUsingBlock:^(VLTPBSensor *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  if (self.hasTimestamp) {
    [output writeDouble:8 value:self.timestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasImpressionId) {
    size_ += computeStringSize(1, self.impressionId);
  }
  if (self.hasIfa) {
    size_ += computeStringSize(2, self.ifa);
  }
  if (self.hasSequenceIndex) {
    size_ += computeUInt32Size(3, self.sequenceIndex);
  }
  if (self.hasAppId) {
    size_ += computeStringSize(4, self.appId);
  }
  if (self.hasMetadata) {
    size_ += computeStringSize(5, self.metadata);
  }
  if (self.hasPlatform) {
    size_ += computeEnumSize(6, self.platform);
  }
  [self.sensorsArray enumerateObjectsUsingBlock:^(VLTPBSensor *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  if (self.hasTimestamp) {
    size_ += computeDoubleSize(8, self.timestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VLTPBCapture*) parseFromData:(NSData*) data {
  return (VLTPBCapture*)[[[VLTPBCapture builder] mergeFromData:data] build];
}
+ (VLTPBCapture*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VLTPBCapture*)[[[VLTPBCapture builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VLTPBCapture*) parseFromInputStream:(NSInputStream*) input {
  return (VLTPBCapture*)[[[VLTPBCapture builder] mergeFromInputStream:input] build];
}
+ (VLTPBCapture*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VLTPBCapture*)[[[VLTPBCapture builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VLTPBCapture*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VLTPBCapture*)[[[VLTPBCapture builder] mergeFromCodedInputStream:input] build];
}
+ (VLTPBCapture*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VLTPBCapture*)[[[VLTPBCapture builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VLTPBCaptureBuilder*) builder {
  return [[VLTPBCaptureBuilder alloc] init];
}
+ (VLTPBCaptureBuilder*) builderWithPrototype:(VLTPBCapture*) prototype {
  return [[VLTPBCapture builder] mergeFrom:prototype];
}
- (VLTPBCaptureBuilder*) builder {
  return [VLTPBCapture builder];
}
- (VLTPBCaptureBuilder*) toBuilder {
  return [VLTPBCapture builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasImpressionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"impressionId", self.impressionId];
  }
  if (self.hasIfa) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ifa", self.ifa];
  }
  if (self.hasSequenceIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequenceIndex", [NSNumber numberWithInteger:self.sequenceIndex]];
  }
  if (self.hasAppId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appId", self.appId];
  }
  if (self.hasMetadata) {
    [output appendFormat:@"%@%@: %@\n", indent, @"metadata", self.metadata];
  }
  if (self.hasPlatform) {
    [output appendFormat:@"%@%@: %@\n", indent, @"platform", NSStringFromVLTPBCapturePlatformType(self.platform)];
  }
  [self.sensorsArray enumerateObjectsUsingBlock:^(VLTPBSensor *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sensors"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithDouble:self.timestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasImpressionId) {
    [dictionary setObject: self.impressionId forKey: @"impressionId"];
  }
  if (self.hasIfa) {
    [dictionary setObject: self.ifa forKey: @"ifa"];
  }
  if (self.hasSequenceIndex) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sequenceIndex] forKey: @"sequenceIndex"];
  }
  if (self.hasAppId) {
    [dictionary setObject: self.appId forKey: @"appId"];
  }
  if (self.hasMetadata) {
    [dictionary setObject: self.metadata forKey: @"metadata"];
  }
  if (self.hasPlatform) {
    [dictionary setObject: @(self.platform) forKey: @"platform"];
  }
  for (VLTPBSensor* element in self.sensorsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"sensors"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithDouble:self.timestamp] forKey: @"timestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VLTPBCapture class]]) {
    return NO;
  }
  VLTPBCapture *otherMessage = other;
  return
      self.hasImpressionId == otherMessage.hasImpressionId &&
      (!self.hasImpressionId || [self.impressionId isEqual:otherMessage.impressionId]) &&
      self.hasIfa == otherMessage.hasIfa &&
      (!self.hasIfa || [self.ifa isEqual:otherMessage.ifa]) &&
      self.hasSequenceIndex == otherMessage.hasSequenceIndex &&
      (!self.hasSequenceIndex || self.sequenceIndex == otherMessage.sequenceIndex) &&
      self.hasAppId == otherMessage.hasAppId &&
      (!self.hasAppId || [self.appId isEqual:otherMessage.appId]) &&
      self.hasMetadata == otherMessage.hasMetadata &&
      (!self.hasMetadata || [self.metadata isEqual:otherMessage.metadata]) &&
      self.hasPlatform == otherMessage.hasPlatform &&
      (!self.hasPlatform || self.platform == otherMessage.platform) &&
      [self.sensorsArray isEqualToArray:otherMessage.sensorsArray] &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasImpressionId) {
    hashCode = hashCode * 31 + [self.impressionId hash];
  }
  if (self.hasIfa) {
    hashCode = hashCode * 31 + [self.ifa hash];
  }
  if (self.hasSequenceIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sequenceIndex] hash];
  }
  if (self.hasAppId) {
    hashCode = hashCode * 31 + [self.appId hash];
  }
  if (self.hasMetadata) {
    hashCode = hashCode * 31 + [self.metadata hash];
  }
  if (self.hasPlatform) {
    hashCode = hashCode * 31 + self.platform;
  }
  [self.sensorsArray enumerateObjectsUsingBlock:^(VLTPBSensor *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.timestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL VLTPBCapturePlatformTypeIsValidValue(VLTPBCapturePlatformType value) {
  switch (value) {
    case VLTPBCapturePlatformTypeIos:
    case VLTPBCapturePlatformTypeAndroid:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromVLTPBCapturePlatformType(VLTPBCapturePlatformType value) {
  switch (value) {
    case VLTPBCapturePlatformTypeIos:
      return @"VLTPBCapturePlatformTypeIos";
    case VLTPBCapturePlatformTypeAndroid:
      return @"VLTPBCapturePlatformTypeAndroid";
    default:
      return nil;
  }
}

@interface VLTPBCaptureBuilder()
@property (strong) VLTPBCapture* resultCapture;
@end

@implementation VLTPBCaptureBuilder
@synthesize resultCapture;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCapture = [[VLTPBCapture alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCapture;
}
- (VLTPBCaptureBuilder*) clear {
  self.resultCapture = [[VLTPBCapture alloc] init];
  return self;
}
- (VLTPBCaptureBuilder*) clone {
  return [VLTPBCapture builderWithPrototype:resultCapture];
}
- (VLTPBCapture*) defaultInstance {
  return [VLTPBCapture defaultInstance];
}
- (VLTPBCapture*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VLTPBCapture*) buildPartial {
  VLTPBCapture* returnMe = resultCapture;
  self.resultCapture = nil;
  return returnMe;
}
- (VLTPBCaptureBuilder*) mergeFrom:(VLTPBCapture*) other {
  if (other == [VLTPBCapture defaultInstance]) {
    return self;
  }
  if (other.hasImpressionId) {
    [self setImpressionId:other.impressionId];
  }
  if (other.hasIfa) {
    [self setIfa:other.ifa];
  }
  if (other.hasSequenceIndex) {
    [self setSequenceIndex:other.sequenceIndex];
  }
  if (other.hasAppId) {
    [self setAppId:other.appId];
  }
  if (other.hasMetadata) {
    [self setMetadata:other.metadata];
  }
  if (other.hasPlatform) {
    [self setPlatform:other.platform];
  }
  if (other.sensorsArray.count > 0) {
    if (resultCapture.sensorsArray == nil) {
      resultCapture.sensorsArray = [[NSMutableArray alloc] initWithArray:other.sensorsArray];
    } else {
      [resultCapture.sensorsArray addObjectsFromArray:other.sensorsArray];
    }
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VLTPBCaptureBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VLTPBCaptureBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setImpressionId:[input readString]];
        break;
      }
      case 18: {
        [self setIfa:[input readString]];
        break;
      }
      case 24: {
        [self setSequenceIndex:[input readUInt32]];
        break;
      }
      case 34: {
        [self setAppId:[input readString]];
        break;
      }
      case 42: {
        [self setMetadata:[input readString]];
        break;
      }
      case 48: {
        VLTPBCapturePlatformType value = (VLTPBCapturePlatformType)[input readEnum];
        if (VLTPBCapturePlatformTypeIsValidValue(value)) {
          [self setPlatform:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 58: {
        VLTPBSensorBuilder* subBuilder = [VLTPBSensor builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSensors:[subBuilder buildPartial]];
        break;
      }
      case 65: {
        [self setTimestamp:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasImpressionId {
  return resultCapture.hasImpressionId;
}
- (NSString*) impressionId {
  return resultCapture.impressionId;
}
- (VLTPBCaptureBuilder*) setImpressionId:(NSString*) value {
  resultCapture.hasImpressionId = YES;
  resultCapture.impressionId = value;
  return self;
}
- (VLTPBCaptureBuilder*) clearImpressionId {
  resultCapture.hasImpressionId = NO;
  resultCapture.impressionId = @"";
  return self;
}
- (BOOL) hasIfa {
  return resultCapture.hasIfa;
}
- (NSString*) ifa {
  return resultCapture.ifa;
}
- (VLTPBCaptureBuilder*) setIfa:(NSString*) value {
  resultCapture.hasIfa = YES;
  resultCapture.ifa = value;
  return self;
}
- (VLTPBCaptureBuilder*) clearIfa {
  resultCapture.hasIfa = NO;
  resultCapture.ifa = @"";
  return self;
}
- (BOOL) hasSequenceIndex {
  return resultCapture.hasSequenceIndex;
}
- (UInt32) sequenceIndex {
  return resultCapture.sequenceIndex;
}
- (VLTPBCaptureBuilder*) setSequenceIndex:(UInt32) value {
  resultCapture.hasSequenceIndex = YES;
  resultCapture.sequenceIndex = value;
  return self;
}
- (VLTPBCaptureBuilder*) clearSequenceIndex {
  resultCapture.hasSequenceIndex = NO;
  resultCapture.sequenceIndex = 0;
  return self;
}
- (BOOL) hasAppId {
  return resultCapture.hasAppId;
}
- (NSString*) appId {
  return resultCapture.appId;
}
- (VLTPBCaptureBuilder*) setAppId:(NSString*) value {
  resultCapture.hasAppId = YES;
  resultCapture.appId = value;
  return self;
}
- (VLTPBCaptureBuilder*) clearAppId {
  resultCapture.hasAppId = NO;
  resultCapture.appId = @"";
  return self;
}
- (BOOL) hasMetadata {
  return resultCapture.hasMetadata;
}
- (NSString*) metadata {
  return resultCapture.metadata;
}
- (VLTPBCaptureBuilder*) setMetadata:(NSString*) value {
  resultCapture.hasMetadata = YES;
  resultCapture.metadata = value;
  return self;
}
- (VLTPBCaptureBuilder*) clearMetadata {
  resultCapture.hasMetadata = NO;
  resultCapture.metadata = @"";
  return self;
}
- (BOOL) hasPlatform {
  return resultCapture.hasPlatform;
}
- (VLTPBCapturePlatformType) platform {
  return resultCapture.platform;
}
- (VLTPBCaptureBuilder*) setPlatform:(VLTPBCapturePlatformType) value {
  resultCapture.hasPlatform = YES;
  resultCapture.platform = value;
  return self;
}
- (VLTPBCaptureBuilder*) clearPlatform {
  resultCapture.hasPlatform = NO;
  resultCapture.platform = VLTPBCapturePlatformTypeIos;
  return self;
}
- (NSMutableArray *)sensors {
  return resultCapture.sensorsArray;
}
- (VLTPBSensor*)sensorsAtIndex:(NSUInteger)index {
  return [resultCapture sensorsAtIndex:index];
}
- (VLTPBCaptureBuilder *)addSensors:(VLTPBSensor*)value {
  if (resultCapture.sensorsArray == nil) {
    resultCapture.sensorsArray = [[NSMutableArray alloc]init];
  }
  [resultCapture.sensorsArray addObject:value];
  return self;
}
- (VLTPBCaptureBuilder *)setSensorsArray:(NSArray *)array {
  resultCapture.sensorsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (VLTPBCaptureBuilder *)clearSensors {
  resultCapture.sensorsArray = nil;
  return self;
}
- (BOOL) hasTimestamp {
  return resultCapture.hasTimestamp;
}
- (Float64) timestamp {
  return resultCapture.timestamp;
}
- (VLTPBCaptureBuilder*) setTimestamp:(Float64) value {
  resultCapture.hasTimestamp = YES;
  resultCapture.timestamp = value;
  return self;
}
- (VLTPBCaptureBuilder*) clearTimestamp {
  resultCapture.hasTimestamp = NO;
  resultCapture.timestamp = 0;
  return self;
}
@end

@interface VLTPBSensor ()
@property VLTPBSensorType type;
@property (strong) NSMutableArray * samplesArray;
@end

@implementation VLTPBSensor

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
@synthesize samplesArray;
@dynamic samples;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = VLTPBSensorTypeAccel;
  }
  return self;
}
static VLTPBSensor* defaultVLTPBSensorInstance = nil;
+ (void) initialize {
  if (self == [VLTPBSensor class]) {
    defaultVLTPBSensorInstance = [[VLTPBSensor alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultVLTPBSensorInstance;
}
- (instancetype) defaultInstance {
  return defaultVLTPBSensorInstance;
}
- (NSArray *)samples {
  return samplesArray;
}
- (VLTPBSample*)samplesAtIndex:(NSUInteger)index {
  return [samplesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  __block BOOL isInitsamples = YES;
   [self.samples enumerateObjectsUsingBlock:^(VLTPBSample *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsamples = NO;
      *stop = YES;
    }
  }];
  if (!isInitsamples) return isInitsamples;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  [self.samplesArray enumerateObjectsUsingBlock:^(VLTPBSample *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  [self.samplesArray enumerateObjectsUsingBlock:^(VLTPBSample *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VLTPBSensor*) parseFromData:(NSData*) data {
  return (VLTPBSensor*)[[[VLTPBSensor builder] mergeFromData:data] build];
}
+ (VLTPBSensor*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VLTPBSensor*)[[[VLTPBSensor builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VLTPBSensor*) parseFromInputStream:(NSInputStream*) input {
  return (VLTPBSensor*)[[[VLTPBSensor builder] mergeFromInputStream:input] build];
}
+ (VLTPBSensor*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VLTPBSensor*)[[[VLTPBSensor builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VLTPBSensor*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VLTPBSensor*)[[[VLTPBSensor builder] mergeFromCodedInputStream:input] build];
}
+ (VLTPBSensor*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VLTPBSensor*)[[[VLTPBSensor builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VLTPBSensorBuilder*) builder {
  return [[VLTPBSensorBuilder alloc] init];
}
+ (VLTPBSensorBuilder*) builderWithPrototype:(VLTPBSensor*) prototype {
  return [[VLTPBSensor builder] mergeFrom:prototype];
}
- (VLTPBSensorBuilder*) builder {
  return [VLTPBSensor builder];
}
- (VLTPBSensorBuilder*) toBuilder {
  return [VLTPBSensor builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromVLTPBSensorType(self.type)];
  }
  [self.samplesArray enumerateObjectsUsingBlock:^(VLTPBSample *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"samples"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  for (VLTPBSample* element in self.samplesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"samples"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VLTPBSensor class]]) {
    return NO;
  }
  VLTPBSensor *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      [self.samplesArray isEqualToArray:otherMessage.samplesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  [self.samplesArray enumerateObjectsUsingBlock:^(VLTPBSample *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL VLTPBSensorTypeIsValidValue(VLTPBSensorType value) {
  switch (value) {
    case VLTPBSensorTypeAccel:
    case VLTPBSensorTypeGyro:
    case VLTPBSensorTypeMag:
    case VLTPBSensorTypeGps:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromVLTPBSensorType(VLTPBSensorType value) {
  switch (value) {
    case VLTPBSensorTypeAccel:
      return @"VLTPBSensorTypeAccel";
    case VLTPBSensorTypeGyro:
      return @"VLTPBSensorTypeGyro";
    case VLTPBSensorTypeMag:
      return @"VLTPBSensorTypeMag";
    case VLTPBSensorTypeGps:
      return @"VLTPBSensorTypeGps";
    default:
      return nil;
  }
}

@interface VLTPBSensorBuilder()
@property (strong) VLTPBSensor* resultSensor;
@end

@implementation VLTPBSensorBuilder
@synthesize resultSensor;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSensor = [[VLTPBSensor alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSensor;
}
- (VLTPBSensorBuilder*) clear {
  self.resultSensor = [[VLTPBSensor alloc] init];
  return self;
}
- (VLTPBSensorBuilder*) clone {
  return [VLTPBSensor builderWithPrototype:resultSensor];
}
- (VLTPBSensor*) defaultInstance {
  return [VLTPBSensor defaultInstance];
}
- (VLTPBSensor*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VLTPBSensor*) buildPartial {
  VLTPBSensor* returnMe = resultSensor;
  self.resultSensor = nil;
  return returnMe;
}
- (VLTPBSensorBuilder*) mergeFrom:(VLTPBSensor*) other {
  if (other == [VLTPBSensor defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.samplesArray.count > 0) {
    if (resultSensor.samplesArray == nil) {
      resultSensor.samplesArray = [[NSMutableArray alloc] initWithArray:other.samplesArray];
    } else {
      [resultSensor.samplesArray addObjectsFromArray:other.samplesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VLTPBSensorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VLTPBSensorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        VLTPBSensorType value = (VLTPBSensorType)[input readEnum];
        if (VLTPBSensorTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        VLTPBSampleBuilder* subBuilder = [VLTPBSample builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSamples:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultSensor.hasType;
}
- (VLTPBSensorType) type {
  return resultSensor.type;
}
- (VLTPBSensorBuilder*) setType:(VLTPBSensorType) value {
  resultSensor.hasType = YES;
  resultSensor.type = value;
  return self;
}
- (VLTPBSensorBuilder*) clearType {
  resultSensor.hasType = NO;
  resultSensor.type = VLTPBSensorTypeAccel;
  return self;
}
- (NSMutableArray *)samples {
  return resultSensor.samplesArray;
}
- (VLTPBSample*)samplesAtIndex:(NSUInteger)index {
  return [resultSensor samplesAtIndex:index];
}
- (VLTPBSensorBuilder *)addSamples:(VLTPBSample*)value {
  if (resultSensor.samplesArray == nil) {
    resultSensor.samplesArray = [[NSMutableArray alloc]init];
  }
  [resultSensor.samplesArray addObject:value];
  return self;
}
- (VLTPBSensorBuilder *)setSamplesArray:(NSArray *)array {
  resultSensor.samplesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (VLTPBSensorBuilder *)clearSamples {
  resultSensor.samplesArray = nil;
  return self;
}
@end

@interface VLTPBSample ()
@property Float64 timestamp;
@property (strong) PBAppendableArray * valuesArray;
@end

@implementation VLTPBSample

- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
@synthesize valuesArray;
@dynamic values;
- (instancetype) init {
  if ((self = [super init])) {
    self.timestamp = 0;
  }
  return self;
}
static VLTPBSample* defaultVLTPBSampleInstance = nil;
+ (void) initialize {
  if (self == [VLTPBSample class]) {
    defaultVLTPBSampleInstance = [[VLTPBSample alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultVLTPBSampleInstance;
}
- (instancetype) defaultInstance {
  return defaultVLTPBSampleInstance;
}
- (PBArray *)values {
  return valuesArray;
}
- (Float32)valuesAtIndex:(NSUInteger)index {
  return [valuesArray floatAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTimestamp) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTimestamp) {
    [output writeDouble:1 value:self.timestamp];
  }
  const NSUInteger valuesArrayCount = self.valuesArray.count;
  if (valuesArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.valuesArray.data;
    for (NSUInteger i = 0; i < valuesArrayCount; ++i) {
      [output writeFloat:2 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTimestamp) {
    size_ += computeDoubleSize(1, self.timestamp);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.valuesArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VLTPBSample*) parseFromData:(NSData*) data {
  return (VLTPBSample*)[[[VLTPBSample builder] mergeFromData:data] build];
}
+ (VLTPBSample*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VLTPBSample*)[[[VLTPBSample builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VLTPBSample*) parseFromInputStream:(NSInputStream*) input {
  return (VLTPBSample*)[[[VLTPBSample builder] mergeFromInputStream:input] build];
}
+ (VLTPBSample*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VLTPBSample*)[[[VLTPBSample builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VLTPBSample*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VLTPBSample*)[[[VLTPBSample builder] mergeFromCodedInputStream:input] build];
}
+ (VLTPBSample*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VLTPBSample*)[[[VLTPBSample builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VLTPBSampleBuilder*) builder {
  return [[VLTPBSampleBuilder alloc] init];
}
+ (VLTPBSampleBuilder*) builderWithPrototype:(VLTPBSample*) prototype {
  return [[VLTPBSample builder] mergeFrom:prototype];
}
- (VLTPBSampleBuilder*) builder {
  return [VLTPBSample builder];
}
- (VLTPBSampleBuilder*) toBuilder {
  return [VLTPBSample builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithDouble:self.timestamp]];
  }
  [self.valuesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"values", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithDouble:self.timestamp] forKey: @"timestamp"];
  }
  NSMutableArray * valuesArrayArray = [NSMutableArray new];
  NSUInteger valuesArrayCount=self.valuesArray.count;
  for(int i=0;i<valuesArrayCount;i++){
    [valuesArrayArray addObject: @([self.valuesArray floatAtIndex:i])];
  }
  [dictionary setObject: valuesArrayArray forKey: @"values"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VLTPBSample class]]) {
    return NO;
  }
  VLTPBSample *otherMessage = other;
  return
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      [self.valuesArray isEqualToArray:otherMessage.valuesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.timestamp] hash];
  }
  [self.valuesArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface VLTPBSampleBuilder()
@property (strong) VLTPBSample* resultSample;
@end

@implementation VLTPBSampleBuilder
@synthesize resultSample;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSample = [[VLTPBSample alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSample;
}
- (VLTPBSampleBuilder*) clear {
  self.resultSample = [[VLTPBSample alloc] init];
  return self;
}
- (VLTPBSampleBuilder*) clone {
  return [VLTPBSample builderWithPrototype:resultSample];
}
- (VLTPBSample*) defaultInstance {
  return [VLTPBSample defaultInstance];
}
- (VLTPBSample*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VLTPBSample*) buildPartial {
  VLTPBSample* returnMe = resultSample;
  self.resultSample = nil;
  return returnMe;
}
- (VLTPBSampleBuilder*) mergeFrom:(VLTPBSample*) other {
  if (other == [VLTPBSample defaultInstance]) {
    return self;
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.valuesArray.count > 0) {
    if (resultSample.valuesArray == nil) {
      resultSample.valuesArray = [other.valuesArray copy];
    } else {
      [resultSample.valuesArray appendArray:other.valuesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VLTPBSampleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VLTPBSampleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setTimestamp:[input readDouble]];
        break;
      }
      case 21: {
        [self addValues:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasTimestamp {
  return resultSample.hasTimestamp;
}
- (Float64) timestamp {
  return resultSample.timestamp;
}
- (VLTPBSampleBuilder*) setTimestamp:(Float64) value {
  resultSample.hasTimestamp = YES;
  resultSample.timestamp = value;
  return self;
}
- (VLTPBSampleBuilder*) clearTimestamp {
  resultSample.hasTimestamp = NO;
  resultSample.timestamp = 0;
  return self;
}
- (PBAppendableArray *)values {
  return resultSample.valuesArray;
}
- (Float32)valuesAtIndex:(NSUInteger)index {
  return [resultSample valuesAtIndex:index];
}
- (VLTPBSampleBuilder *)addValues:(Float32)value {
  if (resultSample.valuesArray == nil) {
    resultSample.valuesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultSample.valuesArray addFloat:value];
  return self;
}
- (VLTPBSampleBuilder *)setValuesArray:(NSArray *)array {
  resultSample.valuesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (VLTPBSampleBuilder *)setValuesValues:(const Float32 *)values count:(NSUInteger)count {
  resultSample.valuesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (VLTPBSampleBuilder *)clearValues {
  resultSample.valuesArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
