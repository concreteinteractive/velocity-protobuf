// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: velocity.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Velocity.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - VLTPBVelocityRoot

@implementation VLTPBVelocityRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - VLTPBVelocityRoot_FileDescriptor

static GPBFileDescriptor *VLTPBVelocityRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"VelocityProto"
                                                 objcPrefix:@"VLTPB"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum VLTPBPlatformType

GPBEnumDescriptor *VLTPBPlatformType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Ios\000Android\000";
    static const int32_t values[] = {
        VLTPBPlatformType_Ios,
        VLTPBPlatformType_Android,
    };
    static const char *extraTextFormatInfo = "\001\001\007\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(VLTPBPlatformType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:VLTPBPlatformType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL VLTPBPlatformType_IsValidValue(int32_t value__) {
  switch (value__) {
    case VLTPBPlatformType_Ios:
    case VLTPBPlatformType_Android:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - VLTPBSensor

@implementation VLTPBSensor

@dynamic hasType, type;
@dynamic samplesArray, samplesArray_Count;

typedef struct VLTPBSensor__storage_ {
  uint32_t _has_storage_[1];
  VLTPBSensor_Type type;
  NSMutableArray *samplesArray;
} VLTPBSensor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = VLTPBSensor_Type_EnumDescriptor,
        .number = VLTPBSensor_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VLTPBSensor__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "samplesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VLTPBSample),
        .number = VLTPBSensor_FieldNumber_SamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VLTPBSensor__storage_, samplesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VLTPBSensor class]
                                     rootClass:[VLTPBVelocityRoot class]
                                          file:VLTPBVelocityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VLTPBSensor__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum VLTPBSensor_Type

GPBEnumDescriptor *VLTPBSensor_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Accel\000Gyro\000Mag\000Gps\000";
    static const int32_t values[] = {
        VLTPBSensor_Type_Accel,
        VLTPBSensor_Type_Gyro,
        VLTPBSensor_Type_Mag,
        VLTPBSensor_Type_Gps,
    };
    static const char *extraTextFormatInfo = "\003\000\005\000\001\004\000\002\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(VLTPBSensor_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:VLTPBSensor_Type_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL VLTPBSensor_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case VLTPBSensor_Type_Accel:
    case VLTPBSensor_Type_Gyro:
    case VLTPBSensor_Type_Mag:
    case VLTPBSensor_Type_Gps:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - VLTPBSample

@implementation VLTPBSample

@dynamic hasTimestamp, timestamp;
@dynamic valuesArray, valuesArray_Count;

typedef struct VLTPBSample__storage_ {
  uint32_t _has_storage_[1];
  GPBFloatArray *valuesArray;
  double timestamp;
} VLTPBSample__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBSample_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VLTPBSample__storage_, timestamp),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "valuesArray",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBSample_FieldNumber_ValuesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VLTPBSample__storage_, valuesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VLTPBSample class]
                                     rootClass:[VLTPBVelocityRoot class]
                                          file:VLTPBVelocityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VLTPBSample__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VLTPBCapture

@implementation VLTPBCapture

@dynamic hasImpressionId, impressionId;
@dynamic hasIfa, ifa;
@dynamic hasSequenceIndex, sequenceIndex;
@dynamic hasAppId, appId;
@dynamic hasMetadata, metadata;
@dynamic hasPlatform, platform;
@dynamic sensorsArray, sensorsArray_Count;
@dynamic hasTimestamp, timestamp;

typedef struct VLTPBCapture__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sequenceIndex;
  VLTPBPlatformType platform;
  NSString *impressionId;
  NSString *ifa;
  NSString *appId;
  NSString *metadata;
  NSMutableArray *sensorsArray;
  double timestamp;
} VLTPBCapture__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "impressionId",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBCapture_FieldNumber_ImpressionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VLTPBCapture__storage_, impressionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ifa",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBCapture_FieldNumber_Ifa,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VLTPBCapture__storage_, ifa),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sequenceIndex",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBCapture_FieldNumber_SequenceIndex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VLTPBCapture__storage_, sequenceIndex),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBCapture_FieldNumber_AppId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VLTPBCapture__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBCapture_FieldNumber_Metadata,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VLTPBCapture__storage_, metadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = VLTPBPlatformType_EnumDescriptor,
        .number = VLTPBCapture_FieldNumber_Platform,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VLTPBCapture__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sensorsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VLTPBSensor),
        .number = VLTPBCapture_FieldNumber_SensorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VLTPBCapture__storage_, sensorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBCapture_FieldNumber_Timestamp,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VLTPBCapture__storage_, timestamp),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VLTPBCapture class]
                                     rootClass:[VLTPBVelocityRoot class]
                                          file:VLTPBVelocityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VLTPBCapture__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\014\000\003\r\000\004\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VLTPBDetectMotionRequest

@implementation VLTPBDetectMotionRequest

@dynamic hasId_p, id_p;
@dynamic hasUserId, userId;
@dynamic hasSequenceIndex, sequenceIndex;
@dynamic hasPlatform, platform;
@dynamic hasTimestamp, timestamp;
@dynamic modelNameArray, modelNameArray_Count;
@dynamic sensorsArray, sensorsArray_Count;

typedef struct VLTPBDetectMotionRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sequenceIndex;
  VLTPBPlatformType platform;
  NSString *id_p;
  NSString *userId;
  NSMutableArray *modelNameArray;
  NSMutableArray *sensorsArray;
  double timestamp;
} VLTPBDetectMotionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBDetectMotionRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VLTPBDetectMotionRequest__storage_, id_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBDetectMotionRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VLTPBDetectMotionRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sequenceIndex",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBDetectMotionRequest_FieldNumber_SequenceIndex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VLTPBDetectMotionRequest__storage_, sequenceIndex),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = VLTPBPlatformType_EnumDescriptor,
        .number = VLTPBDetectMotionRequest_FieldNumber_Platform,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VLTPBDetectMotionRequest__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBDetectMotionRequest_FieldNumber_Timestamp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VLTPBDetectMotionRequest__storage_, timestamp),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "modelNameArray",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBDetectMotionRequest_FieldNumber_ModelNameArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VLTPBDetectMotionRequest__storage_, modelNameArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sensorsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VLTPBSensor),
        .number = VLTPBDetectMotionRequest_FieldNumber_SensorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VLTPBDetectMotionRequest__storage_, sensorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VLTPBDetectMotionRequest class]
                                     rootClass:[VLTPBVelocityRoot class]
                                          file:VLTPBVelocityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VLTPBDetectMotionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\006\000\003\r\000\006\000modelName\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VLTPBHandshakeRequest

@implementation VLTPBHandshakeRequest

@dynamic hasAuthToken, authToken;
@dynamic hasIdfa, idfa;
@dynamic hasUserId, userId;
@dynamic hasAppId, appId;
@dynamic hasPlatform, platform;

typedef struct VLTPBHandshakeRequest__storage_ {
  uint32_t _has_storage_[1];
  VLTPBPlatformType platform;
  NSString *authToken;
  NSString *idfa;
  NSString *userId;
  NSString *appId;
} VLTPBHandshakeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authToken",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBHandshakeRequest_FieldNumber_AuthToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VLTPBHandshakeRequest__storage_, authToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idfa",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBHandshakeRequest_FieldNumber_Idfa,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VLTPBHandshakeRequest__storage_, idfa),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBHandshakeRequest_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VLTPBHandshakeRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBHandshakeRequest_FieldNumber_AppId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VLTPBHandshakeRequest__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = VLTPBPlatformType_EnumDescriptor,
        .number = VLTPBHandshakeRequest_FieldNumber_Platform,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VLTPBHandshakeRequest__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VLTPBHandshakeRequest class]
                                     rootClass:[VLTPBVelocityRoot class]
                                          file:VLTPBVelocityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VLTPBHandshakeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\003\006\000\004\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VLTPBHandshakeResponse

@implementation VLTPBHandshakeResponse

@dynamic hasSampleSize, sampleSize;
@dynamic hasCaptureInterval, captureInterval;
@dynamic hasCanDetectMotion, canDetectMotion;
@dynamic hasCanLabelMotion, canLabelMotion;

typedef struct VLTPBHandshakeResponse__storage_ {
  uint32_t _has_storage_[1];
  double sampleSize;
  double captureInterval;
} VLTPBHandshakeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sampleSize",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBHandshakeResponse_FieldNumber_SampleSize,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VLTPBHandshakeResponse__storage_, sampleSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "captureInterval",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBHandshakeResponse_FieldNumber_CaptureInterval,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VLTPBHandshakeResponse__storage_, captureInterval),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "canDetectMotion",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBHandshakeResponse_FieldNumber_CanDetectMotion,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "canLabelMotion",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBHandshakeResponse_FieldNumber_CanLabelMotion,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VLTPBHandshakeResponse class]
                                     rootClass:[VLTPBVelocityRoot class]
                                          file:VLTPBVelocityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VLTPBHandshakeResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\n\000\002\017\000\003\017\000\004\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VLTPBRequest

@implementation VLTPBRequest

@dynamic sensorsArray, sensorsArray_Count;
@dynamic modelNamesArray, modelNamesArray_Count;
@dynamic hasSessionId, sessionId;

typedef struct VLTPBRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *sensorsArray;
  NSMutableArray *modelNamesArray;
  NSString *sessionId;
} VLTPBRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sensorsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VLTPBSensor),
        .number = VLTPBRequest_FieldNumber_SensorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VLTPBRequest__storage_, sensorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modelNamesArray",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBRequest_FieldNumber_ModelNamesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VLTPBRequest__storage_, modelNamesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBRequest_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VLTPBRequest__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VLTPBRequest class]
                                     rootClass:[VLTPBVelocityRoot class]
                                          file:VLTPBVelocityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VLTPBRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\000modelNames\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VLTPBModelPrediction

@implementation VLTPBModelPrediction

@dynamic hasModelName, modelName;
@dynamic predictionsArray, predictionsArray_Count;

typedef struct VLTPBModelPrediction__storage_ {
  uint32_t _has_storage_[1];
  NSString *modelName;
  NSMutableArray *predictionsArray;
} VLTPBModelPrediction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelName",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBModelPrediction_FieldNumber_ModelName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VLTPBModelPrediction__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "predictionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VLTPBPrediction),
        .number = VLTPBModelPrediction_FieldNumber_PredictionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VLTPBModelPrediction__storage_, predictionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VLTPBModelPrediction class]
                                     rootClass:[VLTPBVelocityRoot class]
                                          file:VLTPBVelocityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VLTPBModelPrediction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VLTPBPrediction

@implementation VLTPBPrediction

@dynamic hasName, name;
@dynamic hasConfidence, confidence;
@dynamic hasTimestamp, timestamp;

typedef struct VLTPBPrediction__storage_ {
  uint32_t _has_storage_[1];
  float confidence;
  NSString *name;
  double timestamp;
} VLTPBPrediction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBPrediction_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VLTPBPrediction__storage_, name),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "confidence",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBPrediction_FieldNumber_Confidence,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VLTPBPrediction__storage_, confidence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBPrediction_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VLTPBPrediction__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VLTPBPrediction class]
                                     rootClass:[VLTPBVelocityRoot class]
                                          file:VLTPBVelocityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VLTPBPrediction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VLTPBError

@implementation VLTPBError

@dynamic hasErrorMessage, errorMessage;
@dynamic hasErrorCode, errorCode;

typedef struct VLTPBError__storage_ {
  uint32_t _has_storage_[1];
  NSString *errorMessage;
  NSString *errorCode;
} VLTPBError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorMessage",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBError_FieldNumber_ErrorMessage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VLTPBError__storage_, errorMessage),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "errorCode",
        .dataTypeSpecific.className = NULL,
        .number = VLTPBError_FieldNumber_ErrorCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VLTPBError__storage_, errorCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VLTPBError class]
                                     rootClass:[VLTPBVelocityRoot class]
                                          file:VLTPBVelocityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VLTPBError__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\014\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VLTPBResponse

@implementation VLTPBResponse

@dynamic modelPredictionsArray, modelPredictionsArray_Count;
@dynamic hasError, error;

typedef struct VLTPBResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *modelPredictionsArray;
  VLTPBError *error;
} VLTPBResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelPredictionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VLTPBModelPrediction),
        .number = VLTPBResponse_FieldNumber_ModelPredictionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VLTPBResponse__storage_, modelPredictionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(VLTPBError),
        .number = VLTPBResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VLTPBResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VLTPBResponse class]
                                     rootClass:[VLTPBVelocityRoot class]
                                          file:VLTPBVelocityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VLTPBResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000modelPredictions\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
